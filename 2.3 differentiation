import numpy as np
import matplotlib.pyplot as plt

# Define the function to differentiate
def func(x):
    """
    The function to be differentiated, which is x**2.
    """
    return x**2

# Define the true derivative for comparison
def true_derivative(x):
    """
    The true derivative of the function, which is 2*x.
    """
    return 2 * x

# Finite difference method for numerical differentiation (forward difference)
def forward_difference(func, x, h):
    """
    Implements the finite difference method for numerical differentiation using the forward difference formula.
    """
    return (func(x + h) - func(x)) / h

# Define parameters
x_value = 2.0  # The point at which to evaluate the derivative
h_values = [0.1, 0.01, 0.001]  # List of values for the step size h to experiment with

# Calculate the true derivative
true_derivative_value = true_derivative(x_value)
print(f'True Derivative Value: {true_derivative_value}')

# Experiment with different values of h
for h in h_values:
    numerical_derivative = forward_difference(func, x_value, h)
    print(f'h={h}: Numerical Derivative={numerical_derivative:.4f}')

# Plot the function and tangent line for visualization
x_values = np.linspace(0, 4, 100)

plt.plot(x_values, func(x_values), label='$x^2$ function')
plt.scatter(x_value, func(x_value), color='red', label='Point of Interest')

# Plot tangent lines for different h values
for h in h_values:
    tangent_line = true_derivative_value * (x_values - x_value) + func(x_value)
    plt.plot(x_values, tangent_line, label=f'Tangent (h={h})', linestyle='--')

# Show the plot and legend
plt.title('Numerical Differentiation Experiment')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.show()
